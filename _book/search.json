[
  {
    "objectID": "p1c2-programming-basics.html",
    "href": "p1c2-programming-basics.html",
    "title": "5  Programming Basics",
    "section": "",
    "text": "When working in most programming languages, you will generally have the option to execute code one of two ways:\n\nin the console\nin a script\n\n\n\nThe first way to run code is directly in the console. If you’re working in R Studio, you will access the console through the “console” pane.\nAlternatively, if you downloaded R to your personal computer, you will likely be able to search your machine for an app named “RGui” and access the console this way as well.\n\n\n\n\n\nIn the following example, the text “print(3+2)”” is typed into the console. The user then presses enter and sees the result: “[1] 5”.\n\nprint(3+2)\n\n[1] 5\n\n\nYou may be wondering what “[1]” represents. This is simply a line number in the console and can be ignored for most practical purposes. Additionally, most of the examples in this book will be structured in this way: formatted code immediately followed by the code output.\n\n\n\nYou likely will be using scripts most of the time when working in R. A script is just a file that allows you to type out longer sequences of code and execute them all at once.\nFor those of you following along in R Studio, you can create a script by pressing “Ctrl + Shift + N” on Windows or by selecting “R Script” from the “New File” dropdown in the top left corner.\n\n\n\n\n\nFrom here you can type the same command from before into the source pane. Next, you’ll want to save your file by pressing “Ctrl + S” on Windows or by selecting “Save” from the “File” dropdown in the top left corner. Now just give your file a name and your file will automatically be saved as a “.R” file.\nFinally, run your newly created R script by pressing the “source” button."
  },
  {
    "objectID": "p1c2-programming-basics.html#comments",
    "href": "p1c2-programming-basics.html#comments",
    "title": "5  Programming Basics",
    "section": "5.2 Comments",
    "text": "5.2 Comments\nComments are present in most (if not all) programming languages. They allow the user to write text in their code that isn’t executed or read by computers. Comments can serve many purposes such as notes, instructions, or formatting.\nComments are created in R by using the “#” symbol. Here’s an example:\n\n# This is a comment\nprint(3+2)\n\n[1] 5\n\n\nSome programming languages allow you a “bulk-comment” feature which allows you to quickly comment out multiple consecutive lines of text. However, in R, there is no such option. Each line must begin with a “#” symbol, as such:\n\n# This is the first line of a comment\n# This is the second line of a comment\nprint(3+2)\n\n[1] 5\n\n\nComments don’t have to start at the beginning of a line. You are able to start comments anywhere on a line like in this example:\n\nprint(3+2) # This comment starts mid-line\n\n[1] 5"
  },
  {
    "objectID": "p1c2-programming-basics.html#variables",
    "href": "p1c2-programming-basics.html#variables",
    "title": "5  Programming Basics",
    "section": "5.3 Variables",
    "text": "5.3 Variables\nVariables are used in programming to give values to a symbol. In the following example we have a variable named “rate” which is equal to 15, a variable named “hours” which is equal to 4, and a variable named “total_cost” which is equal to rate * hours.\n\nrate <- 15\nhours <- 4\ntotal_cost <- rate * hours\nprint(total_cost)\n\n[1] 60"
  },
  {
    "objectID": "p1c2-programming-basics.html#operators",
    "href": "p1c2-programming-basics.html#operators",
    "title": "5  Programming Basics",
    "section": "5.4 Operators",
    "text": "5.4 Operators\nThe following image demonstrates the operators that are available to you in R.\n\nEXPLAIN ALL OF THE OPERATORS HERE (NOT JUST THE IMAGE AS AN EXPLANATION)"
  },
  {
    "objectID": "p1c2-programming-basics.html#functions",
    "href": "p1c2-programming-basics.html#functions",
    "title": "5  Programming Basics",
    "section": "5.5 Functions",
    "text": "5.5 Functions\nFunctions allow you to execute a predefined set of commands with just one command. The syntax of functions in R is as follows.\n\n# Create a function called function_name\nfunction_name <- function() {\n  print(\"Hello World!\")\n}\n\n# Call your newly created function\nfunction_name()\n\n[1] \"Hello World!\"\n\n\nTo go one step further, you can also add “arguments” to a function. Arguments allow you to pass information into the function when it is called. Here’s an example:\n\n# Create a function called add_numbers which will add \n# two specified numbers together and print the result\nadd_numbers <- function(x, y) {\n    print(x + y)\n}\n\n# Call your newly created function twice with different inputs\nadd_numbers(2, 3)\n\n[1] 5\n\nadd_numbers(50, 50)\n\n[1] 100\n\n\nFinally, you can return a value from a function as such:\n\n# Create a function called calculate_raise which multiplies \n# base_salary and annual_adjustment and returns the result\ncalculate_raise <- function(base_salary, annual_adjustment) {\n    raise <- base_salary * annual_adjustment\n    return(raise)\n}\n\n# Calculate John's raise\njohns_raise <- calculate_raise(90000, .05)\n\n#Calculate Jane's raise\njanes_raise <- calculate_raise(100000, .045)\n\nprint(\"John's Raise:\")\n\n[1] \"John's Raise:\"\n\nprint(johns_raise)\n\n[1] 4500\n\nprint(\"Jane's Raise:\")\n\n[1] \"Jane's Raise:\"\n\nprint(janes_raise)\n\n[1] 4500"
  },
  {
    "objectID": "p1c2-programming-basics.html#loops",
    "href": "p1c2-programming-basics.html#loops",
    "title": "5  Programming Basics",
    "section": "5.6 Loops",
    "text": "5.6 Loops\nThere are two types of loops in R: while loops and for loops.\n\n5.6.1 While Loops\nWhile loops are executed as follows:\n\n# Set i equal to 1\ni <- 1\n\n# While i is less than or equal to three, print i\n# The loop will increment the value of i after each print\nwhile (i <= 3) {\n  print(i)\n  i <- i + 1\n}\n\n[1] 1\n[1] 2\n[1] 3\n\n\nAdditionally, you can add ‘break’ statements to while loops to stop the loop early.\n\ni <- 1\n\nwhile (i <= 10) {\n    print(i)\n    if (i == 5) {\n        print(\"Stopping halfway\")\n        break\n    }\n    i <- i + 1\n}\n\n[1] 1\n[1] 2\n[1] 3\n[1] 4\n[1] 5\n[1] \"Stopping halfway\"\n\n\n\n\n5.6.2 For Loops\nFor loops are executed as follows:\n\nemployees <- list(\"jane\", \"john\")\n\nfor (employee in employees) {\n  print(employee)\n}\n\n[1] \"jane\"\n[1] \"john\""
  },
  {
    "objectID": "p1c2-programming-basics.html#conditionals",
    "href": "p1c2-programming-basics.html#conditionals",
    "title": "5  Programming Basics",
    "section": "5.7 Conditionals",
    "text": "5.7 Conditionals\nYou are also able to execute a command if a condition is met by using “if” statements.\n\nif (2 > 0) {\n    print(\"true\")\n}\n\n[1] \"true\"\n\n\nYou can add more conditions by adding “else if” statements.\n\nif (2 > 3) {\n    print(\"two is greater than three\")\n} else if (2 < 3) {\n    print(\"two is not greater than three\")\n}\n\n[1] \"two is not greater than three\"\n\n\nFinally, you can catch anything that doesn’t meet any of your conditions by adding an “else” statement at the end.\n\nx <- 20\nif (x < 20) {\n    print(\"x is less than 20\")\n} else if (x > 20) {\n    print(\"x is greater than 20\")\n} else {\n    print(\"x is equal to 20\")\n}\n\n[1] \"x is equal to 20\""
  },
  {
    "objectID": "p1c2-programming-basics.html#libraries",
    "href": "p1c2-programming-basics.html#libraries",
    "title": "5  Programming Basics",
    "section": "5.8 Libraries",
    "text": "5.8 Libraries\nLibraries allow you to access functions other people have created to perform common tasks.\nIn this example, we will be installing and loading a common package named “dplyr”.\nYou first need to install it using the following command.\n\ninstall.packages(\"dplyr\")\n\nNext, you will require the package by using this command.\n\nlibrary(dplyr)\n\nYou are now able to access all of the functions available in the dplyr library!"
  },
  {
    "objectID": "p2c3-working-with-apis.html",
    "href": "p2c3-working-with-apis.html",
    "title": "10  Working with APIs",
    "section": "",
    "text": "install.packages(c('httr', 'jsonlite'))"
  },
  {
    "objectID": "p2c3-working-with-apis.html#require-packages",
    "href": "p2c3-working-with-apis.html#require-packages",
    "title": "10  Working with APIs",
    "section": "10.2 Require Packages",
    "text": "10.2 Require Packages\n\nlibrary('httr')\nlibrary('jsonlite')"
  },
  {
    "objectID": "p2c3-working-with-apis.html#make-request",
    "href": "p2c3-working-with-apis.html#make-request",
    "title": "10  Working with APIs",
    "section": "10.3 Make Request",
    "text": "10.3 Make Request\nPass a URL into the ‘GET’ function and store the response in a variable called ‘res’.\n\nres = GET(\"https://api.helium.io/v1/stats\")\nprint(res)\n\n\nResponse [https://api.helium.io/v1/stats]\n  Date: 2022-08-04 01:25\n  Status: 200\n  Content-Type: application/json; charset=utf-8\n  Size: 922 B"
  },
  {
    "objectID": "p2c3-working-with-apis.html#parse-explore-data",
    "href": "p2c3-working-with-apis.html#parse-explore-data",
    "title": "10  Working with APIs",
    "section": "10.4 Parse & Explore Data",
    "text": "10.4 Parse & Explore Data\nUse the ‘fromJSON’ function from the ‘jsonlite’ package to parse the response data and then print out the names in the resulting data set.\n\ndata = fromJSON(rawToChar(res$content))\n\nnames(data)\n\n\n[1] \"data\"\n\nGo one level deeper into the data set and print out the names again.\n\ndata = data$data\n\nnames(data)\n\n\n[1] \"token_supply\"     \"election_times\"   \"counts\"           \"challenge_counts\" \"block_times\"\n\nAlternatively, you can loop through the names as follows.\n\nfor (name in names(data)){print(name)}\n\n\n[1] \"token_supply\"\n[1] \"election_times\"\n[1] \"counts\"\n[1] \"challenge_counts\"\n[1] \"block_times\"\n\nGet the ‘token_supply’ field from the data.\n\ntoken_supply = data$token_supply\n\nprint(token_supply)\n\n\n[1] 124675821"
  },
  {
    "objectID": "p2c3-working-with-apis.html#adding-parameters-to-requests",
    "href": "p2c3-working-with-apis.html#adding-parameters-to-requests",
    "title": "10  Working with APIs",
    "section": "10.5 Adding Parameters to Requests",
    "text": "10.5 Adding Parameters to Requests\nAdd ‘min_time’ and ‘max_time’ as parameters on a different endpoint and print the resulting ‘fee’ data.\n\nres = GET(\"https://api.helium.io/v1/dc_burns/sum\",\n    query = list(min_time = \"2020-07-27T00:00:00Z\"\n                 , max_time = \"2021-07-27T00:00:00Z\"))\n\ndata = fromJSON(rawToChar(res$content))\nfee = data$data$fee\nprint(fee)\n\n\n[1] 10112755000"
  },
  {
    "objectID": "p2c3-working-with-apis.html#adding-headers-to-requests",
    "href": "p2c3-working-with-apis.html#adding-headers-to-requests",
    "title": "10  Working with APIs",
    "section": "10.6 Adding Headers to Requests",
    "text": "10.6 Adding Headers to Requests\nExecute the same query as above except this time specify headers. This will likely be necessary when working with an API which requires an API Key.\n\nres = GET(\"https://api.helium.io/v1/dc_burns/sum\",\n    query = list(min_time = \"2020-07-27T00:00:00Z\"\n                 , max_time = \"2021-07-27T00:00:00Z\"),\n    add_headers(`Accept`='application/json', `Connection`='keep-live'))\n\ndata = fromJSON(rawToChar(res$content))\nfee = data$data$fee\nprint(fee)\n\n\n[1] 10112755000"
  },
  {
    "objectID": "p3-data-preparation.html",
    "href": "p3-data-preparation.html",
    "title": "Part III: Data Preparation",
    "section": "",
    "text": "1.2 Structure of the Book Part I (Fundamentals) will introduce you to the basics of programming in the context of R. Part II (Data Acquisition) will teach you how to create, import, and access data. Part III (Data Preparation) will show you how to begin preparing your data for analysis. Part IV (Developing Insights) goes through the process of searching for and extracting insights from your data. Part V (Reporting) demonstrates how to wrap your analysis up by developing and automating reports. Each part will be concluded with practical exercises for you to test your skills."
  },
  {
    "objectID": "p3c1-data-cleaning.html#text-to-columns",
    "href": "p3c1-data-cleaning.html#text-to-columns",
    "title": "11  Data Cleaning",
    "section": "11.2 Text to Columns",
    "text": "11.2 Text to Columns"
  },
  {
    "objectID": "p3c1-data-cleaning.html#replace-values",
    "href": "p3c1-data-cleaning.html#replace-values",
    "title": "11  Data Cleaning",
    "section": "11.3 Replace Values",
    "text": "11.3 Replace Values"
  },
  {
    "objectID": "p3c1-data-cleaning.html#drop-columns",
    "href": "p3c1-data-cleaning.html#drop-columns",
    "title": "11  Data Cleaning",
    "section": "11.4 Drop Columns",
    "text": "11.4 Drop Columns"
  },
  {
    "objectID": "p3c1-data-cleaning.html#drop-rows",
    "href": "p3c1-data-cleaning.html#drop-rows",
    "title": "11  Data Cleaning",
    "section": "11.5 Drop Rows",
    "text": "11.5 Drop Rows"
  },
  {
    "objectID": "p3c2-handling-missing-data.html#mean-imputation",
    "href": "p3c2-handling-missing-data.html#mean-imputation",
    "title": "12  Handling Missing Data",
    "section": "12.2 Mean Imputation",
    "text": "12.2 Mean Imputation"
  },
  {
    "objectID": "p3c2-handling-missing-data.html#multiple-imputation",
    "href": "p3c2-handling-missing-data.html#multiple-imputation",
    "title": "12  Handling Missing Data",
    "section": "12.3 Multiple Imputation?",
    "text": "12.3 Multiple Imputation?"
  },
  {
    "objectID": "p3c3-outliers.html#removing-outliers",
    "href": "p3c3-outliers.html#removing-outliers",
    "title": "13  Outliers",
    "section": "13.2 Removing Outliers",
    "text": "13.2 Removing Outliers"
  },
  {
    "objectID": "p3c4-organizing-data.html#filtering",
    "href": "p3c4-organizing-data.html#filtering",
    "title": "14  Organizing Data",
    "section": "14.2 Filtering",
    "text": "14.2 Filtering"
  },
  {
    "objectID": "p3c4-organizing-data.html#grouping",
    "href": "p3c4-organizing-data.html#grouping",
    "title": "14  Organizing Data",
    "section": "14.3 Grouping",
    "text": "14.3 Grouping"
  },
  {
    "objectID": "p4-developing-insights.html",
    "href": "p4-developing-insights.html",
    "title": "Part IV: Developing Insights",
    "section": "",
    "text": "1.2 Structure of the Book Part I (Fundamentals) will introduce you to the basics of programming in the context of R. Part II (Data Acquisition) will teach you how to create, import, and access data. Part III (Data Preparation) will show you how to begin preparing your data for analysis. Part IV (Developing Insights) goes through the process of searching for and extracting insights from your data. Part V (Reporting) demonstrates how to wrap your analysis up by developing and automating reports. Each part will be concluded with practical exercises for you to test your skills."
  },
  {
    "objectID": "p4c3-plotting.html#ggplot2",
    "href": "p4c3-plotting.html#ggplot2",
    "title": "17  Plotting",
    "section": "17.2 ggplot2",
    "text": "17.2 ggplot2\n\n17.2.1 Different types of plots?\n\nResource: https://ggplot2.tidyverse.org/"
  },
  {
    "objectID": "p5-reporting.html",
    "href": "p5-reporting.html",
    "title": "Part V: Reporting",
    "section": "",
    "text": "1.2 Structure of the Book Part I (Fundamentals) will introduce you to the basics of programming in the context of R. Part II (Data Acquisition) will teach you how to create, import, and access data. Part III (Data Preparation) will show you how to begin preparing your data for analysis. Part IV (Developing Insights) goes through the process of searching for and extracting insights from your data. Part V (Reporting) demonstrates how to wrap your analysis up by developing and automating reports. Each part will be concluded with practical exercises for you to test your skills."
  },
  {
    "objectID": "p5c1-spreadsheets.html",
    "href": "p5c1-spreadsheets.html",
    "title": "18  Spreadsheets",
    "section": "",
    "text": "-csvs and xlsx ## Formatting - colors - tabs - font - etc"
  },
  {
    "objectID": "p5c2-r-markdown.html",
    "href": "p5c2-r-markdown.html",
    "title": "19  R Markdown",
    "section": "",
    "text": "R Markdown allows you to create documents in a programmatic fashion that lends itself towards reproducibility."
  },
  {
    "objectID": "p5c2-r-markdown.html#including-plots",
    "href": "p5c2-r-markdown.html#including-plots",
    "title": "19  R Markdown",
    "section": "19.1 Including Plots",
    "text": "19.1 Including Plots\n\nFormats: https://rmarkdown.rstudio.com/formats.html\nResource: https://rmarkdown.rstudio.com/"
  },
  {
    "objectID": "p5c3-r-notebook.html",
    "href": "p5c3-r-notebook.html",
    "title": "20  R Notebook",
    "section": "",
    "text": "Subset of R Markdown\nResource: https://rmarkdown.rstudio.com/lesson-10.html"
  },
  {
    "objectID": "p5c4-r-shiny.html",
    "href": "p5c4-r-shiny.html",
    "title": "21  R Shiny",
    "section": "",
    "text": "Shiny apps account\nQuick Start\nResource: https://shiny.rstudio.com/"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Eremenko, Kirill. 2020. “Hadley Wickham Talks Integration and\nFuture of r and Python [Audio Podcast].” SuperDataScience. https://www.superdatascience.com/podcast/hadley-wickham-talks-integration-and-future-of-python-and-r.\n\n\nHermans, Felienne. 2021. “Hadley Wickham on r and Tidyverse [Audio\nPodcast].” Software Engineering Radio. https://www.se-radio.net/2021/03/episode-450-hadley-wickham-on-r-and-tidyverse/.\n\n\nIhaka, Ross. 1998. “R : Past and Future History.” https://www.stat.auckland.ac.nz/~ihaka/downloads/Interface98.pdf.\n\n\nPaulson, Josh. 2022. Navigating Code in the RStudio IDE. https://support.rstudio.com/hc/en-us/articles/200710523-Navigating-Code-in-the-RStudio-IDE."
  }
]