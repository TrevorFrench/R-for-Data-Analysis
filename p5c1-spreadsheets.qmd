# Spreadsheets

Spreadsheets are common way to communicate information to stakeholders. This chapter will go over how to export .xlsx and .csv files from R, how to format those spreadsheets, and how to add formulas to them.

## Export

### Export .csv Files

In order to export a dataframe to a CSV file, you can use the "write.csv" function. This function will accept a dataframe followed by the desired output location of your file. Let's start by creating a sample dataframe to work with.

```{r}
people <- c("John", "Jane", NA)
id <- c(12, 27, 23)
df <- data.frame(id = id, person = people)
```

```{r}
#| echo: false
knitr::kable(df, format="markdown")
```

Now, let's specify the location we want to store the CSV file at and execute the "write.csv" function.

```{r}
#| eval: false
output <- "C:/File Location/example.csv"
write.csv(df, output)
```

This will give you a file that looks like the following image.

```{r out.extra="style='background-color: #9ecff7; padding:10px; display: block; margin-left: auto; margin-right: auto; width: 50%;'"}
#| label: csv-export
#| echo: false
#| out.width: 500
knitr::include_graphics("images/reporting/csv-export.png", dpi = 270)
```

You'll notice that the first column contains the row numbers of the dataframe. This can be remedied by setting "row.names" to "FALSE" as follows.

```{r}
#| eval: false
write.csv(df, output, row.names = FALSE)
```

This will yield the following result.

```{r out.extra="style='background-color: #9ecff7; padding:10px; display: block; margin-left: auto; margin-right: auto; width: 50%;'"}
#| label: csv-export-2
#| echo: false
#| out.width: 500
knitr::include_graphics("images/reporting/csv-export-2.png", dpi = 270)
```

Finally, you'll notice that one of the names is an "NA" value. You can tell R how to handle these values at the time of exporting your file with the "na" argument. This argument will replace any "NA" values with the value of your chooseing. Let's try replacing the "NA" value with "Unspecified".

```{r}
#| eval: false
write.csv(df, output, row.names = FALSE, na = "Unspecified")
```

This results in the following output:

```{r out.extra="style='background-color: #9ecff7; padding:10px; display: block; margin-left: auto; margin-right: auto; width: 50%;'"}
#| label: csv-export-3
#| echo: false
#| out.width: 500
knitr::include_graphics("images/reporting/csv-export-3.png", dpi = 270)
```

### Export .xlsx Files

Excel files are handled very similarly to CSV files with the exception being that you will need to use the "write_excel" function from the "writexl" library. The following code snippet demonstrates how to export your data to an Excel file.

```{r}
#| eval: false
library(writexl)
output <- "C:/File Location/example.xlsx"
write_xlsx(df, output)
```

saveworkbook
-csvs and xlsx

## Formatting

- colors
- tabs
- font
- etc

## Formulas

## Resources